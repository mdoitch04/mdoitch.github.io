[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Maya Doitch",
    "section": "",
    "text": "Education: California Polytechnic State University- B.S. Statistics"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Open Ended Essay",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\neverest &lt;- read_csv(\"everest.csv\")\n\nRows: 2136 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): expedition_id, peak_name, season, basecamp_date, highpoint_date, te...\ndbl (6): year, highpoint_metres, members, member_deaths, hired_staff, hired_...\nlgl (1): oxygen_used\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\neverest_clean &lt;- everest |&gt; \n  filter(across(everything(), ~ !is.na(.)))\n\nWarning: Using `across()` in `filter()` was deprecated in dplyr 1.0.8.\nℹ Please use `if_any()` or `if_all()` instead."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Open Ended Analysis",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nnp &lt;- read_csv(\"national_park_trails.csv\")\n\nRows: 3313 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): name, area_name, city_name, state_name, country_name, _geoloc, rou...\ndbl  (8): trail_id, popularity, length, elevation_gain, difficulty_rating, v...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nThe Data\nThe dataset for this exam concerns hiking trails in America’s National Parks system. The data are taken from the AllTrails app, which allows users to input new trails and rate existing ones.\nVariables in the dataset are:\n\ntrail_id: ID number for the trail\nname: name of the trail\narea_name: National Park where the trial is located\ncity_name: city where the trail is located\nstate_name: state where the trail is located\ncountry_name: country where the trail is located\n_geoloc: latitude and longitude of the trail\npopularity: how often the trail is used (score from 0 to 100)\nlength: distance covered by the trail (in meters)\nelevation_gain: amount of uphill on the trail (in meters)\ndifficulty_rating: average user rating of trail difficulty\nroute_type: type of trail (loop, out and back, or point to point)\nvisitor_usage: (Honestly, I’m not sure what this one is.)\navg_rating: average visitor rating of the trail (1 to 5 stars)\nnum_reviews: total number of reviews for the trail\nfeatures: notable elements of the trail\nactivities: common uses for the trail\nunits: This variable is a lie – all the lengths are in meters!\n\n\n\nPart 2: Short Answer [50 points]\n\n(4 pts)\n\n\nnp |&gt; \n  filter(avg_rating == 5) |&gt; \n  group_by(state_name) |&gt;\n  summarize(num_trails = n()) |&gt; \n  select(state_name, num_trails) |&gt; \n  slice_max(n = 1, order_by = num_trails)\n\n# A tibble: 1 × 2\n  state_name num_trails\n  &lt;chr&gt;           &lt;int&gt;\n1 California        144\n\n\n\n(5 pts)\n\n\nnp |&gt; \n  filter(state_name == \"Alaska\" ) |&gt; \n  select(name, length) |&gt; \n  slice_max(n = 3, order_by = length)\n\n# A tibble: 3 × 2\n  name                            length\n  &lt;chr&gt;                            &lt;dbl&gt;\n1 Stampede Trail to Sushana River 61477.\n2 Triple Lakes Trail              29773.\n3 Point Gustavus                  20117.\n\n\n\n(5 pts)\n\n\nnp |&gt; \n  filter(elevation_gain &lt; 500) |&gt; \n  group_by(area_name) |&gt; \n  slice_max(n = 1, order_by = popularity) |&gt; \n  select(area_name, name, popularity)\n\n# A tibble: 60 × 3\n# Groups:   area_name [60]\n   area_name                                  name                    popularity\n   &lt;chr&gt;                                      &lt;chr&gt;                        &lt;dbl&gt;\n 1 Acadia National Park                       The Beehive Loop Trail       43.9 \n 2 Arches National Park                       Delicate Arch Trail          63.7 \n 3 Badlands National Park                     Notch Trail                  24.5 \n 4 Big Bend National Park                     Lost Mine Trail              28.6 \n 5 Biscayne National Park                     Biscayne National Park…       5.89\n 6 Black Canyon of the Gunnison National Park Warner Point Nature Tr…      16.3 \n 7 Bryce Canyon National Park                 Navajo Loop and Queen'…      52.0 \n 8 Canyonlands National Park                  Mesa Arch Trail              36.2 \n 9 Capitol Reef National Park                 Hickman Bridge Trail         30.0 \n10 Carlsbad Caverns National Park             Carlsbad Caverns Natio…      15.2 \n# ℹ 50 more rows\n\n\n\n(5 pts)\n\n\nnp |&gt; \n  filter(str_detect(area_name, \"Land|land\")) |&gt; \n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1   109\n\n\n\n(5 pts)\n\n\n clean &lt;- np |&gt; \n  filter(num_reviews &gt;= 15, \n         area_name %in% c(\"Glacier National Park\", \"Great Smoky Mountains National Park\"))|&gt; \n  select(difficulty_rating, avg_rating, area_name)\n\n\n  clean |&gt; \n  ggplot(aes\n         (x=difficulty_rating,\n          fill = factor(avg_rating))\n         )+\n   geom_bar(position = \"fill\", na.rm = TRUE, width = 1.5)+\n  facet_wrap(~ area_name, ncol = 3)+\n  scale_fill_brewer(palette = \"green\", name = \"Avg. Quality\", labels = c(\"3.5\", \"4\", \"4.5\", \"5\"))+\n    scale_x_continuous(breaks = c(1, 3, 5, 7)) +\n    facet_wrap(area_name ~.)+\n    labs(\n      x = \"Difficulty Level\",\n      subtitle = \"(For trails with at least 15 reviews)\",\n      y = \"\",\n      title = \"Relationship between Trail Difficulty and Quality\"\n    )+ \n    theme(plot.subtitle = element_text(size = 7))\n\nWarning: Unknown palette: \"green\"\n\n\n\n\n\n\n\n\n\n\n(10 pts)\n\n\nrecommend_trails &lt;- function(data, park_name, min_elev = 0, \n                             max_elev = Inf, min_rating = 0, trl_type = NULL){\n  stopifnot(is.data.frame(data),\n            is.numeric(min_elev),\n            is.numeric(max_elev),\n            is.numeric(min_rating))\n\n  \n  recommended_trails &lt;- data |&gt;\n    filter(area_name == park_name,\n           elevation_gain &gt;= min_elev,\n           elevation_gain &lt;= max_elev,\n           avg_rating &gt;= min_rating) \n  \n  if (!missing(trl_type)) {\n    recommended_trails &lt;- recommended_trails |&gt;\n      filter(route_type %in% trl_type)\n}\n  \n  recommended_trails &lt;- recommended_trails |&gt;\n    select(name)\n  \n  return(recommended_trails)\n}\n\nInclude the following code to show your function works:\n\nnp |&gt; \n  recommend_trails(\"Haleakala National Park\", \n                   min_elev = 1000, \n                   min_rating = 4)\n\n# A tibble: 3 × 1\n  name                                \n  &lt;chr&gt;                               \n1 Silversword Loop Via Halemau'u Trail\n2 Keonehe'ehe'e Trail                 \n3 Kaupo Trail                         \n\n\n\n(10 pts)\n\n\nmap_dfr(.x = c(\"Sequoia National Park\",\n               \"Joshua Tree National Park\",\n               \"Lassen Volcanic National Park\",\n               \"Kings Canyon National Park\",\n               \"Pinnacles National Park\",\n               \"Death Valley National Park\",\n               \"Redwood National Park\"),\n        ~recommend_trails(data = np,\n                          park_name = .x,\n                          min_elev = 1000,\n                          max_elev = 3000,\n                          min_rating = 4.5,\n                          trl_type = \"loop\"))\n\n# A tibble: 8 × 1\n  name                                                                          \n  &lt;chr&gt;                                                                         \n1 Mineral King to Little Five Lakes Trail                                       \n2 Mineral King: Black Rock Pass Loop                                            \n3 Butte Lake, Snag Lake, Twin Lake, Silver Lake Loop                            \n4 Summit Lake, Horshoe Lake, Snag Lake, Cinder Cone, Twin Lakes, and Echo Lake …\n5 Rae Lakes Trail                                                               \n6 Palisade Basin                                                                \n7 North Lake Loop via Lamarck Col and Alpine Col                                \n8 Cottonwood-Marble Canyon Loop                                                 \n\n\n\n\nPart 3: Statistical Modeling [25 points]\nThe two oldest National Parks in the country are Yosemite National Park and Yellowstone National Park.\n\nold_np &lt;- np |&gt; \n  filter(area_name %in% c(\"Yosemite National Park\",\n                          \"Yellowstone National Park\"))\n\nHow different are these parks? Let’s find out!\n\n(5 pts)\n\n\nold_np |&gt;\n  group_by(area_name, route_type) |&gt; \n  summarize(average_length = mean(length, na.rm = TRUE)) %&gt;%\n  pivot_wider(names_from = area_name, values_from = average_length)\n\n`summarise()` has grouped output by 'area_name'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 3 × 3\n  route_type     `Yellowstone National Park` `Yosemite National Park`\n  &lt;chr&gt;                                &lt;dbl&gt;                    &lt;dbl&gt;\n1 loop                                17205.                   33120.\n2 out and back                        15812.                   16729.\n3 point to point                      43194.                   55434.\n\n\nYosemite National Park has a longer trail length for each trail type, on average, than Yellowstone National Park does. Yosemite’s average trail length for the loop trail type is almost double Yellowstone’s.\n\n\n(6 pts)\n\n\n\nold_np |&gt; \n  ggplot(aes(x = length, y = elevation_gain, color = area_name)) +\n  geom_point() +\n  theme_bw() +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"blue\")+\n  labs (x= \"Length\",\n        y = \"Elevation gain\",\n        color = \"National Park\",\n        title = \"Linear Regression Models of Elevation Gain from Trail Length\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nb. (4 pts)\n\nyellowstone &lt;- lm(elevation_gain ~length,\n                  data = subset(np, area_name == \"Yellowstone National Park\"))\n\nyosemite &lt;- lm(elevation_gain ~length,\n                  data = subset(np, area_name == \"Yosemite National Park\"))\n\nc. (4 pts)\n\nlibrary(broom)\ntidy(yellowstone)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept) 112.     28.3           3.94 1.09e- 4\n2 length        0.0155  0.000808     19.2  1.83e-49\n\ntidy(yosemite)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic   p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)  15.3    32.6          0.470 6.39e-  1\n2 length        0.0406  0.000713    56.9   2.70e-141\n\n\nd. (3 pts)\nThe average steepness of a trail in Yellowstone is 0.0155 meters gained per meter covered. The average steepness of a trail in Yosemite is 0.0406 meters gained per meter covered.\ne. (3 pts)\nTrails in Yosemite national park tend to have a higher trail steepness than trails in Yellowstone. Since the coefficient is larger for trails in Yosemite (0.0406) than for trails in Yellowstone(0.0155), Yosemite trails have a steeper average elevation gain per meter climbed compared to Yellowstone trails. Also, in the graph above, the blue dots (Yosemite) are also higher than the red dots (Yellowstone). Therefore, the parks do tend to have different trail steepness."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMay 23, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMay 20, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html#midterm-essay",
    "href": "posts/post-with-code/index.html#midterm-essay",
    "title": "Open Ended Essay",
    "section": "Midterm Essay",
    "text": "Midterm Essay\nThis data set contains information on multiple expeditions of people climbing up Mount Everest. Before starting, I cleaned up the data set by removing expeditions with missing values. In this data set, each row represents a singular expedition and each column contains information about the expedition.\nTo answer the question, “How have Mt. Everest treks changed over time,” I decided to investigate the relationship between the duration of the expeditions and the average meters climbed, while also accounting for the seasonal variation.\nIn order to do this I created a new data set and isolated season, duration, and average meters climbed. I turned season into a factor variable, and converted the dates into date variables. I did this in order to create a duration variable, by subtracting the two date variables. I also created the mean_mtrs variable which is the average high point meters grouped by season.\n\neverest_essay &lt;- everest_clean |&gt; \n  mutate(season = factor(season),\n         basecamp_date = mdy(basecamp_date),\n         highpoint_date = mdy(highpoint_date),\n         duration = highpoint_date - basecamp_date) |&gt; \n  group_by(season, duration) |&gt; \n  summarize(mean_mtrs = mean(highpoint_metres))\n\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n\n\nBefore computing the summary statistic table, my hypothesis was that the season with the longest duration of climbing and highest average meters climbed would be summer and the shortest would be winter. I made a summary statistics summary that includes the mean, standard deviation, median, and maximum mean meters.\n\neverest_essay |&gt;\n  group_by(season) |&gt;\n  summarize(avg_mean_mtrs = mean(mean_mtrs),\n            sd_mtrs = sd(mean_mtrs),\n            median_mtrs = median(mean_mtrs),\n            max_mtrs = max(mean_mtrs)\n            )\n\n# A tibble: 4 × 5\n  season avg_mean_mtrs sd_mtrs median_mtrs max_mtrs\n  &lt;fct&gt;          &lt;dbl&gt;   &lt;dbl&gt;       &lt;dbl&gt;    &lt;dbl&gt;\n1 Autumn         8029.    511.       8040      8850\n2 Spring         8228.    809.       8645.     8850\n3 Summer         7393.   1102.       7500      8530\n4 Winter         8158.    560.       8000      8850\n\n\nTo my surprise, summer had the least average meters climbed as well as the smallest maximum meters. Its standard deviation was the largest, meaning its average meters climbed varied tremendously. The seasons with the most average meters climbed were spring and autumn, with spring tying for the maximum average meters climbed. This makes sense because spring most likely has the best conditions to climb.\nLastly, I made a graph to represent my research question. I made a scatter plot with the duration of the expedition as my x-axis and the average meters climbed as my y axis. I also faceted and colored by season. I put the graphs for each season side by side, because proximity allows for easier comparisons among groups.\n\n ggplot(everest_essay, \n        aes(x = duration,\n            y = mean_mtrs,\n            color = season\n             )\n         ) +\n  geom_point(alpha = 0.7) +\n  geom_smooth(method = lm) +\n  facet_grid(~ season) +\n  theme_bw() +\n  labs(x = \"Duration of Expedition (in days)\",\n       y = \"\",\n       subtitle = \"Mean Highpoint Metres Climbed\",\n       title = \"Distribution of Expeditions for Each Season\",\n       color = \"Season\",\n       shape = \"Season\"\n       ) +\n  theme(\n    strip.text.x = element_text(size = 11),\n    panel.spacing = unit(0.6, \"lines\") \n  )\n\nDon't know how to automatically pick scale for object of type &lt;difftime&gt;.\nDefaulting to continuous.\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nThis graph disproves my hypothesis and agrees with my summary statistic table. By looking at the graph, spring was the season with the longest duration as well as the highest average meters climbed. Additionally, although winter has the shortest duration out of all the seasons, its mean high point meters climbed are more than summer’s. Autumn seems to have the second-best conditions for climbing, after spring, because it has the second highest average meters climbed. There is more data associated with autumn and spring than the others. Overall, the graph gave me a lot of insight and addressed my research question suitably."
  },
  {
    "objectID": "posts/welcome/proj1.html",
    "href": "posts/welcome/proj1.html",
    "title": "Open Ended Analysis",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nnp &lt;- read_csv(\"national_park_trails.csv\")\n\nRows: 3313 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): name, area_name, city_name, state_name, country_name, _geoloc, rou...\ndbl  (8): trail_id, popularity, length, elevation_gain, difficulty_rating, v...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nThe Data\nThe dataset for this exam concerns hiking trails in America’s National Parks system. The data are taken from the AllTrails app, which allows users to input new trails and rate existing ones.\nVariables in the dataset are:\n\ntrail_id: ID number for the trail\nname: name of the trail\narea_name: National Park where the trial is located\ncity_name: city where the trail is located\nstate_name: state where the trail is located\ncountry_name: country where the trail is located\n_geoloc: latitude and longitude of the trail\npopularity: how often the trail is used (score from 0 to 100)\nlength: distance covered by the trail (in meters)\nelevation_gain: amount of uphill on the trail (in meters)\ndifficulty_rating: average user rating of trail difficulty\nroute_type: type of trail (loop, out and back, or point to point)\nvisitor_usage: (Honestly, I’m not sure what this one is.)\navg_rating: average visitor rating of the trail (1 to 5 stars)\nnum_reviews: total number of reviews for the trail\nfeatures: notable elements of the trail\nactivities: common uses for the trail\nunits: This variable is a lie – all the lengths are in meters!\n\n\n\nPart 2: Short Answer [50 points]\n\n(4 pts)\n\n\nnp |&gt; \n  filter(avg_rating == 5) |&gt; \n  group_by(state_name) |&gt;\n  summarize(num_trails = n()) |&gt; \n  select(state_name, num_trails) |&gt; \n  slice_max(n = 1, order_by = num_trails)\n\n# A tibble: 1 × 2\n  state_name num_trails\n  &lt;chr&gt;           &lt;int&gt;\n1 California        144\n\n\n\n(5 pts)\n\n\nnp |&gt; \n  filter(state_name == \"Alaska\" ) |&gt; \n  select(name, length) |&gt; \n  slice_max(n = 3, order_by = length)\n\n# A tibble: 3 × 2\n  name                            length\n  &lt;chr&gt;                            &lt;dbl&gt;\n1 Stampede Trail to Sushana River 61477.\n2 Triple Lakes Trail              29773.\n3 Point Gustavus                  20117.\n\n\n\n(5 pts)\n\n\nnp |&gt; \n  filter(elevation_gain &lt; 500) |&gt; \n  group_by(area_name) |&gt; \n  slice_max(n = 1, order_by = popularity) |&gt; \n  select(area_name, name, popularity)\n\n# A tibble: 60 × 3\n# Groups:   area_name [60]\n   area_name                                  name                    popularity\n   &lt;chr&gt;                                      &lt;chr&gt;                        &lt;dbl&gt;\n 1 Acadia National Park                       The Beehive Loop Trail       43.9 \n 2 Arches National Park                       Delicate Arch Trail          63.7 \n 3 Badlands National Park                     Notch Trail                  24.5 \n 4 Big Bend National Park                     Lost Mine Trail              28.6 \n 5 Biscayne National Park                     Biscayne National Park…       5.89\n 6 Black Canyon of the Gunnison National Park Warner Point Nature Tr…      16.3 \n 7 Bryce Canyon National Park                 Navajo Loop and Queen'…      52.0 \n 8 Canyonlands National Park                  Mesa Arch Trail              36.2 \n 9 Capitol Reef National Park                 Hickman Bridge Trail         30.0 \n10 Carlsbad Caverns National Park             Carlsbad Caverns Natio…      15.2 \n# ℹ 50 more rows\n\n\n\n(5 pts)\n\n\nnp |&gt; \n  filter(str_detect(area_name, \"Land|land\")) |&gt; \n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1   109\n\n\n\n(5 pts)\n\n\n clean &lt;- np |&gt; \n  filter(num_reviews &gt;= 15, \n         area_name %in% c(\"Glacier National Park\", \"Great Smoky Mountains National Park\"))|&gt; \n  select(difficulty_rating, avg_rating, area_name)\n\n\n  clean |&gt; \n  ggplot(aes\n         (x=difficulty_rating,\n          fill = factor(avg_rating))\n         )+\n   geom_bar(position = \"fill\", na.rm = TRUE, width = 1.5)+\n  facet_wrap(~ area_name, ncol = 3)+\n  scale_fill_brewer(palette = \"green\", name = \"Avg. Quality\", labels = c(\"3.5\", \"4\", \"4.5\", \"5\"))+\n    scale_x_continuous(breaks = c(1, 3, 5, 7)) +\n    facet_wrap(area_name ~.)+\n    labs(\n      x = \"Difficulty Level\",\n      subtitle = \"(For trails with at least 15 reviews)\",\n      y = \"\",\n      title = \"Relationship between Trail Difficulty and Quality\"\n    )+ \n    theme(plot.subtitle = element_text(size = 7))\n\nWarning: Unknown palette: \"green\"\n\n\n\n\n\n\n\n\n\n\n(10 pts)\n\n\nrecommend_trails &lt;- function(data, park_name, min_elev = 0, \n                             max_elev = Inf, min_rating = 0, trl_type = NULL){\n  stopifnot(is.data.frame(data),\n            is.numeric(min_elev),\n            is.numeric(max_elev),\n            is.numeric(min_rating))\n\n  \n  recommended_trails &lt;- data |&gt;\n    filter(area_name == park_name,\n           elevation_gain &gt;= min_elev,\n           elevation_gain &lt;= max_elev,\n           avg_rating &gt;= min_rating) \n  \n  if (!missing(trl_type)) {\n    recommended_trails &lt;- recommended_trails |&gt;\n      filter(route_type %in% trl_type)\n}\n  \n  recommended_trails &lt;- recommended_trails |&gt;\n    select(name)\n  \n  return(recommended_trails)\n}\n\nInclude the following code to show your function works:\n\nnp |&gt; \n  recommend_trails(\"Haleakala National Park\", \n                   min_elev = 1000, \n                   min_rating = 4)\n\n# A tibble: 3 × 1\n  name                                \n  &lt;chr&gt;                               \n1 Silversword Loop Via Halemau'u Trail\n2 Keonehe'ehe'e Trail                 \n3 Kaupo Trail                         \n\n\n\n(10 pts)\n\n\nmap_dfr(.x = c(\"Sequoia National Park\",\n               \"Joshua Tree National Park\",\n               \"Lassen Volcanic National Park\",\n               \"Kings Canyon National Park\",\n               \"Pinnacles National Park\",\n               \"Death Valley National Park\",\n               \"Redwood National Park\"),\n        ~recommend_trails(data = np,\n                          park_name = .x,\n                          min_elev = 1000,\n                          max_elev = 3000,\n                          min_rating = 4.5,\n                          trl_type = \"loop\"))\n\n# A tibble: 8 × 1\n  name                                                                          \n  &lt;chr&gt;                                                                         \n1 Mineral King to Little Five Lakes Trail                                       \n2 Mineral King: Black Rock Pass Loop                                            \n3 Butte Lake, Snag Lake, Twin Lake, Silver Lake Loop                            \n4 Summit Lake, Horshoe Lake, Snag Lake, Cinder Cone, Twin Lakes, and Echo Lake …\n5 Rae Lakes Trail                                                               \n6 Palisade Basin                                                                \n7 North Lake Loop via Lamarck Col and Alpine Col                                \n8 Cottonwood-Marble Canyon Loop                                                 \n\n\n\n\nPart 3: Statistical Modeling [25 points]\nThe two oldest National Parks in the country are Yosemite National Park and Yellowstone National Park.\n\nold_np &lt;- np |&gt; \n  filter(area_name %in% c(\"Yosemite National Park\",\n                          \"Yellowstone National Park\"))\n\nHow different are these parks? Let’s find out!\n\n(5 pts)\n\n\nold_np |&gt;\n  group_by(area_name, route_type) |&gt; \n  summarize(average_length = mean(length, na.rm = TRUE)) %&gt;%\n  pivot_wider(names_from = area_name, values_from = average_length)\n\n`summarise()` has grouped output by 'area_name'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 3 × 3\n  route_type     `Yellowstone National Park` `Yosemite National Park`\n  &lt;chr&gt;                                &lt;dbl&gt;                    &lt;dbl&gt;\n1 loop                                17205.                   33120.\n2 out and back                        15812.                   16729.\n3 point to point                      43194.                   55434.\n\n\nYosemite National Park has a longer trail length for each trail type, on average, than Yellowstone National Park does. Yosemite’s average trail length for the loop trail type is almost double Yellowstone’s.\n\n\n(6 pts)\n\n\n\nold_np |&gt; \n  ggplot(aes(x = length, y = elevation_gain, color = area_name)) +\n  geom_point() +\n  theme_bw() +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"blue\")+\n  labs (x= \"Length\",\n        y = \"Elevation gain\",\n        color = \"National Park\",\n        title = \"Linear Regression Models of Elevation Gain from Trail Length\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nb. (4 pts)\n\nyellowstone &lt;- lm(elevation_gain ~length,\n                  data = subset(np, area_name == \"Yellowstone National Park\"))\n\nyosemite &lt;- lm(elevation_gain ~length,\n                  data = subset(np, area_name == \"Yosemite National Park\"))\n\nc. (4 pts)\n\nlibrary(broom)\ntidy(yellowstone)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept) 112.     28.3           3.94 1.09e- 4\n2 length        0.0155  0.000808     19.2  1.83e-49\n\ntidy(yosemite)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic   p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)  15.3    32.6          0.470 6.39e-  1\n2 length        0.0406  0.000713    56.9   2.70e-141\n\n\nd. (3 pts)\nThe average steepness of a trail in Yellowstone is 0.0155 meters gained per meter covered. The average steepness of a trail in Yosemite is 0.0406 meters gained per meter covered.\ne. (3 pts)\nTrails in Yosemite national park tend to have a higher trail steepness than trails in Yellowstone. Since the coefficient is larger for trails in Yosemite (0.0406) than for trails in Yellowstone(0.0155), Yosemite trails have a steeper average elevation gain per meter climbed compared to Yellowstone trails. Also, in the graph above, the blue dots (Yosemite) are also higher than the red dots (Yellowstone). Therefore, the parks do tend to have different trail steepness."
  }
]